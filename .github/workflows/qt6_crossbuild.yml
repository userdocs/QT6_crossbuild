name: qt6+crossbuild+package+release
on:
  workflow_dispatch:
  schedule:
    - cron: "0 04 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [qt6]
        os_id: [debian, ubuntu]
        os_version_id: [buster, bullseye, bionic, focal, jammy]
        arch: [amd64, armhf, arm64]
        include:
          - arch: amd64
            CHOST: "x86_64-linux-gnu"
            docker_arch: amd64
            docker_platform: linux/amd64
          - arch: armhf
            CHOST: "arm-linux-gnueabihf"
            docker_arch: arm32v7
            docker_platform: linux/arm/v7
          - arch: arm64
            CHOST: "aarch64-linux-gnu"
            docker_arch: arm64v8
            docker_platform: linux/arm64/v8
        exclude:
          - os_id: debian
            os_version_id: bionic
          - os_id: debian
            os_version_id: focal
          - os_id: debian
            os_version_id: jammy
          - os_id: ubuntu
            os_version_id: buster
          - os_id: ubuntu
            os_version_id: bullseye

    name: ${{ matrix.arch }} ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.name }}

    env:
      opt_dir_name: "opt/local"
      include_dir: "/opt/local/include"
      lib_dir: "/opt/local/lib"
      qt_short_version: "6.3"
      cxx_standard: "17"
      prerelease: false

    steps:
      - uses: actions/checkout@v3.0.2

      - name: Host - update
        run: sudo apt-get update

      - name: Host - upgrade
        run: sudo apt-get -y upgrade

      - name: Host - Install host qemu-static
        run: sudo apt-get install -y qemu binfmt-support qemu-user-static

      - name: Host - Docker multiarch bootstrap
        run: sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Host - Create Docker template env file
        run: |
          echo "DEBIAN_FRONTEND=noninteractive" > env.custom
          echo "LANG=en_US.UTF-8" >> env.custom
          echo "LANGUAGE=en_US.UTF-8" >> env.custom
          echo "LC_ALL=en_US.UTF-8" >> env.custom
          echo "LC_CTYPE=en_US.UTF-8" >> env.custom
          echo "PATH=/${{ env.opt_dir_name }}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> env.custom
          echo "LD_LIBRARY_PATH=/${{ env.opt_dir_name }}/lib:/usr/lib/${{ matrix.CHOST }}:/usr/lib:/usr/local/lib" >> env.custom
          echo "CHOST=${{ matrix.CHOST }}" >> env.custom
          echo "CC=${{ matrix.CHOST }}-gcc" >> env.custom
          echo "AR=${{ matrix.CHOST }}-ar" >> env.custom
          echo "CXX=${{ matrix.CHOST }}-g++" >> env.custom

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Host - Create docker binary test ${{ matrix.arch }} container
        run: docker run --name bintest -it -d --env-file env.custom -w /root --platform ${{ matrix.docker_platform }} -v ${{ github.workspace }}:/root ${{ matrix.docker_arch }}/${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Docker target - fix Ubuntu sources
        if: |
          matrix.os_id == 'ubuntu' && matrix.arch != 'amd64'
        run: |
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }} main restricted universe multiverse" > sources.list'
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }}-updates main restricted universe multiverse" >> sources.list'
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }}-security main restricted universe multiverse" >> sources.list'
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }} main restricted universe multiverse" >> sources.list'
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-updates main restricted universe multiverse" >> sources.list'
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-backports restricted universe multiverse" >> sources.list'
          docker exec --env-file env.custom -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://security.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-security main restricted universe multiverse" >> sources.list'

      - name: Docker target - dpkg configure arch
        run: docker exec --env-file env.custom multiarch dpkg --add-architecture ${{ matrix.arch }}

      - name: Docker target - Run apt-get update
        run: |
          docker exec --env-file env.custom multiarch apt-get update
          docker exec --env-file env.custom bintest apt-get update

      - name: Docker target - Run apt-get upgrade
        run: |
          docker exec --env-file env.custom multiarch apt-get upgrade -y
          docker exec --env-file env.custom bintest apt-get upgrade -y

      - name: Docker target - apt-get install the core build dependencies
        run: |
          docker exec --env-file env.custom multiarch apt-get install -y build-essential curl pkg-config automake libtool git perl python3 python3-dev unzip ccache locales
          docker exec --env-file env.custom bintest apt-get install -y openssl binutils

      - name: Docker target - apt-get install crossbuild-essential
        if: matrix.arch != 'amd64'
        run: docker exec --env-file env.custom multiarch apt-get install -y crossbuild-essential-${{ matrix.arch }}

      - name: Docker target - apt-get install cross target deps
        run: docker exec --env-file env.custom multiarch apt-get install -y openssl:${{ matrix.arch }} re2c:${{ matrix.arch }} libstdc++-*-dev:${{ matrix.arch }}

      - name: Docker target - bionic - apt-get install gcc-8-base g++-8
        if: matrix.arch == 'amd64' && matrix.os_version_id == 'bionic'
        run: docker exec --env-file env.custom multiarch apt-get install -y gcc-8 g++-8

      - name: Docker target - bionic - apt-get install gcc-8 g++-8 cross
        if: matrix.arch != 'amd64' && matrix.os_version_id == 'bionic'
        run: docker exec --env-file env.custom multiarch apt-get install -y cpp-8-${{ matrix.CHOST }} g++-8-${{ matrix.CHOST }} gcc-8-${{ matrix.CHOST }}

      - name: Docker target - bionic - reconfigure build vars
        if: matrix.os_version_id == 'bionic'
        run: |
          echo "CC=${{ matrix.CHOST }}-gcc-8" >> env.custom
          echo "AR=${{ matrix.CHOST }}-gcc-ar-8" >> env.custom
          echo "CXX=${{ matrix.CHOST }}-g++-8" >> env.custom

      - name: Docker target - locales
        run: |
          docker exec --env-file env.custom multiarch /bin/bash -c 'echo LC_ALL=en_US.UTF-8 >> /etc/environment'
          docker exec --env-file env.custom multiarch /bin/bash -c 'echo en_US.UTF-8 UTF-8 >> /etc/locale.gen'
          docker exec --env-file env.custom multiarch /bin/bash -c 'echo LANG=en_US.UTF-8 > /etc/locale.conf'
          docker exec --env-file env.custom multiarch locale-gen en_US.UTF-8
          docker exec --env-file env.custom multiarch dpkg-reconfigure locales

      - name: Docker target - cmake and ninja download and install
        run: |
          docker exec --env-file env.custom multiarch curl -sNL "https://github.com/userdocs/cmake-crossbuild/releases/download/3.24.20220629_1.11.0/${{ matrix.os_id }}-${{ matrix.os_version_id }}-cmake-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_version_id }}-cmake-${{ matrix.arch }}.deb
          docker exec --env-file env.custom multiarch dpkg -i ${{ matrix.os_id }}-${{ matrix.os_version_id }}-cmake-${{ matrix.arch }}.deb

      - name: Docker target - zlib-ng download and install
        run: |
          docker exec --env-file env.custom multiarch curl -sNL "https://github.com/userdocs/zlib-ng-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_version_id }}-zlib-ng-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_version_id }}-zlib-ng-${{ matrix.arch }}.deb
          docker exec --env-file env.custom multiarch dpkg -i ${{ matrix.os_id }}-${{ matrix.os_version_id }}-zlib-ng-${{ matrix.arch }}.deb

      - name: Docker target - openssl download and install
        run: |
          docker exec --env-file env.custom multiarch curl -sNL "https://github.com/userdocs/openssl-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_version_id }}-openssl-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_version_id }}-openssl-${{ matrix.arch }}.deb
          docker exec --env-file env.custom multiarch dpkg -i ${{ matrix.os_id }}-${{ matrix.os_version_id }}-openssl-${{ matrix.arch }}.deb

      - name: Docker target - qt get latest release info and set to env
        run: |
          qt_github_tag_list="$(git ls-remote -q -t --refs https://github.com/qt/qtbase.git | awk '{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV)"
          qt_github_tag="$(grep -Eom1 "v${{ env.qt_short_version }}.([0-9]{1,2})" <<< "${qt_github_tag_list}")"
          echo "qt_version=${qt_github_tag/v/}" >> $GITHUB_ENV

      - name: Docker target - qt set the download urls
        run: |
          echo "qt_qtbase_url=https://download.qt.io/official_releases/qt/${{ env.qt_short_version }}/${{ env.qt_version }}/submodules/qtbase-everywhere-src-${{ env.qt_version }}.tar.xz" >> $GITHUB_ENV
          echo "qt_qttools_url=https://download.qt.io/official_releases/qt/${{ env.qt_short_version }}/${{ env.qt_version }}/submodules/qttools-everywhere-src-${{ env.qt_version }}.tar.xz" >> $GITHUB_ENV

      - name: Docker target - qt qtbase - curl
        run: |
          docker exec --env-file env.custom multiarch curl -sNL ${{ env.qt_qtbase_url }} -o qtbase.tar.xz
          docker exec --env-file env.custom multiarch tar xf qtbase.tar.xz

      - name: Docker target - qt qtbase - cmake configure
        run: |
          docker exec --env-file env.custom -w /root/qtbase-everywhere-src-${{ env.qt_version }} multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D QT_FEATURE_optimize_full=on \
          -D QT_FEATURE_gui=OFF -D QT_FEATURE_widgets=OFF -D QT_FEATURE_dbus=OFF -D QT_FEATURE_openssl_linked=on \
          -D QT_FEATURE_system_pcre2=off -D QT_FEATURE_system_harfbuzz=off \
          -D QT_FEATURE_system_libjpeg=off -D QT_FEATURE_system_libpng=off -D QT_FEATURE_system_freetype=off \
          -D QT_FEATURE_testlib=off -D QT_BUILD_EXAMPLES=off -D QT_BUILD_TESTS=off \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_PREFIX_PATH="/${{ env.opt_dir_name }}" \
          -D CMAKE_INSTALL_PREFIX="/root/build/${{ env.opt_dir_name }}"

      - name: Docker target - qt qtbase - cmake build
        run: docker exec --env-file env.custom -w /root/qtbase-everywhere-src-${{ env.qt_version }} multiarch cmake --build build

      - name: Docker target - qt qtbase - cmake install
        run: docker exec --env-file env.custom -w /root/qtbase-everywhere-src-${{ env.qt_version }} multiarch cmake --install build

      - name: Docker target - qt qttools - curl
        run: |
          docker exec --env-file env.custom multiarch curl -sNL ${{ env.qt_qttools_url }} -o qttools.tar.xz
          docker exec --env-file env.custom multiarch tar xf qttools.tar.xz

      - name: Docker target - qt qttools - cmake configure
        run: |
          docker exec --env-file env.custom -w /root/qttools-everywhere-src-${{ env.qt_version }} multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_PREFIX_PATH="/${{ env.opt_dir_name }}" \
          -D CMAKE_INSTALL_PREFIX="/root/build/${{ env.opt_dir_name }}"

      - name: Docker target - qt qttools - cmake build
        run: docker exec --env-file env.custom -w /root/qttools-everywhere-src-${{ env.qt_version }} multiarch cmake --build build

      - name: Docker target - qt qttools - cmake install
        run: docker exec --env-file env.custom -w /root/qttools-everywhere-src-${{ env.qt_version }} multiarch cmake --install build

      - name: Docker target - Set deb dependencies for qt
        run: echo "qt-deb-deps=zlib-ng,openssl" >> $GITHUB_ENV

      - name: Docker target - ldconfig - create /etc/ld.so.conf.d/qt6.conf
        run: |
          docker exec --env-file env.custom -w /root/build multiarch mkdir -p etc/ld.so.conf.d
          docker exec --env-file env.custom -w /root/build/etc/ld.so.conf.d multiarch bash -c "echo '/${{ env.opt_dir_name }}/lib' > qt6.conf"

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          version: "${{ env.qt_version }}"
          depends: "${{ env.qt-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_version_id }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.qt_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1.10.0
        with:
          prerelease: ${{ env.prerelease }}
          artifacts: "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"
          replacesArtifacts: true
          tag: "${{ env.qt_version }}"
          name: "qt ${{ env.qt_version }}"
          body: "Built with cmake using v${{ env.qt_version }} from github on amd64 arm64 armhf for Debian Buster Bullseye and Ubuntu bionic Focal"
          allowUpdates: true
          token: "${{ secrets.GITHUB_TOKEN }}"
